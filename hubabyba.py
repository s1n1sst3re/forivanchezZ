import logging
import json
from datetime import datetime, timedelta
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

API_TOKEN = "8138057398:AAGLnW9nSQ4s6GDpWcICYWqru8e4OHB-1Z0"
CHANNEL_ID = "-1002427749393"
CHANNEL_USERNAME = "OTBROSGK"  # –ü—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
OPERATOR_USER_ID = 7620008618
MESSAGE_COOLDOWN = timedelta(minutes=30)
ADMIN_MESSAGE_COOLDOWN = timedelta(hours=1)
USER_DATA_FILE = "user_data.json"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class UserManager:
    def __init__(self):
        self.user_data = self._load_data()

    def _load_data(self):
        try:
            with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                for user in data["users"].values():
                    user.setdefault("agreed", False)
                    user.setdefault("last_message_time", None)
                    user.setdefault("last_admin_message_time", None)
                if "pending_messages" not in data:
                    data["pending_messages"] = {}
                return data
        except (FileNotFoundError, json.JSONDecodeError):
            return {"users": {}, "last_number": 0, "pending_messages": {}}

    def _save_data(self):
        with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(self.user_data, f, ensure_ascii=False, indent=4)

    def get_user_info(self, user_id: int) -> dict:
        str_id = str(user_id)
        if str_id not in self.user_data["users"]:
            self.user_data["last_number"] += 1
            self.user_data["users"][str_id] = {
                "number": self.user_data["last_number"],
                "messages_sent": 0,
                "agreed": False,
                "last_message_time": None,
                "last_admin_message_time": None,
                "created_at": datetime.now().isoformat()
            }
            self._save_data()
        return self.user_data["users"][str_id]

    def increment_message_count(self, user_id: int):
        user = self.get_user_info(user_id)
        user["messages_sent"] += 1
        self._save_data()

    def set_agreed(self, user_id: int):
        user = self.get_user_info(user_id)
        user["agreed"] = True
        self._save_data()

    def set_last_message_time(self, user_id: int, time: datetime):
        user = self.get_user_info(user_id)
        user["last_message_time"] = time.isoformat()
        self._save_data()

    def set_last_admin_message_time(self, user_id: int, time: datetime):
        user = self.get_user_info(user_id)
        user["last_admin_message_time"] = time.isoformat()
        self._save_data()

    def get_last_message_time(self, user_id: int) -> datetime | None:
        user = self.get_user_info(user_id)
        if user["last_message_time"]:
            return datetime.fromisoformat(user["last_message_time"])
        return None

    def get_last_admin_message_time(self, user_id: int) -> datetime | None:
        user = self.get_user_info(user_id)
        if user["last_admin_message_time"]:
            return datetime.fromisoformat(user["last_admin_message_time"])
        return None

    def add_pending_message(self, user_id: int, message_type: str, content: str, caption: str = None):
        str_id = str(user_id)
        self.user_data["pending_messages"][str_id] = {
            "type": message_type,
            "content": content,
            "caption": caption,
            "timestamp": datetime.now().isoformat()
        }
        self._save_data()

    def get_pending_message(self, user_id: int):
        str_id = str(user_id)
        return self.user_data["pending_messages"].get(str_id)

    def remove_pending_message(self, user_id: int):
        str_id = str(user_id)
        if str_id in self.user_data["pending_messages"]:
            del self.user_data["pending_messages"][str_id]
            self._save_data()

user_manager = UserManager()

def main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"), KeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É")],
        [KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]
    ], resize_keyboard=True)

FAQ_TEXT = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
‚ùóÔ∏è –ó–∞–ø—Ä–µ—â–µ–Ω–æ:
- –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –í–ª–∞—Å—Ç–∏    
- –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π
- –î—Ä—É–≥–∏–µ –≤–∏–¥—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
–ó–∞ –≤—Å—ë –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–µ—Å—ë—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –í–´. –°–º –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é –†–§ [–∑–¥–µ—Å—å](http://kremlin.ru/acts/constitution).
–ù–∞–∂–º–∏—Ç–µ "–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞) ‚úÖ", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.
"""

async def send_main_menu(update: Update, text: str):
    if update.message:
        await update.message.reply_text(text, reply_markup=main_keyboard())
    elif update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=main_keyboard())

def format_user_tag(user_id: int) -> str:
    user_info = user_manager.get_user_info(user_id)
    return f"#–æ—Ç–±—Ä–æ—Å{user_info['number']}"

async def check_agreement(update: Update) -> bool:
    user_id = update.effective_user.id
    user_info = user_manager.get_user_info(user_id)
    if not user_info["agreed"]:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞) ‚úÖ", callback_data=f"agree:{user_id}")]
        ])
        await update.message.reply_markdown(FAQ_TEXT, reply_markup=keyboard)
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_info = user_manager.get_user_info(user_id)
    
    if not user_info["agreed"]:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞) ‚úÖ", callback_data=f"agree:{user_id}")]
        ])
        await update.message.reply_markdown(FAQ_TEXT, reply_markup=keyboard)
    else:
        await send_main_menu(update, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

async def handle_agreement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    _, user_id = query.data.split(":")
    if int(user_id) != query.from_user.id:
        await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        return
    
    user_manager.set_agreed(int(user_id))
    await query.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞!")
    await send_main_menu(update, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

async def handle_message_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_agreement(update):
        return
    
    user_id = update.effective_user.id
    last_time = user_manager.get_last_message_time(user_id)
    
    if last_time and (datetime.now() - last_time) < MESSAGE_COOLDOWN:
        remaining = MESSAGE_COOLDOWN - (datetime.now() - last_time)
        await update.message.reply_text(
            f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {remaining.seconds//60} –º–∏–Ω—É—Ç.",
            reply_markup=main_keyboard()
        )
        return
    
    context.user_data["awaiting_message"] = True
    await update.message.reply_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )

async def handle_admin_request_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_agreement(update):
        return
    
    user_id = update.effective_user.id
    last_time = user_manager.get_last_admin_message_time(user_id)
    
    if last_time and (datetime.now() - last_time) < ADMIN_MESSAGE_COOLDOWN:
        remaining = ADMIN_MESSAGE_COOLDOWN - (datetime.now() - last_time)
        hours = remaining.seconds // 3600
        minutes = (remaining.seconds % 3600) // 60
        await update.message.reply_text(
            f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç.",
            reply_markup=main_keyboard()
        )
        return
    
    context.user_data["awaiting_admin_message"] = True
    await update.message.reply_text(
        "üì® –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_agreement(update):
        return
    
    user_id = update.effective_user.id
    
    if context.user_data.get("awaiting_message"):
        message_type = None
        content = None
        caption = None

        if update.message.text:
            message_type = "text"
            content = update.message.text
        elif update.message.photo:
            message_type = "photo"
            content = update.message.photo[-1].file_id
            caption = update.message.caption
        elif update.message.video:
            message_type = "video"
            content = update.message.video.file_id
            caption = update.message.caption

        if message_type:
            user_manager.add_pending_message(user_id, message_type, content, caption)
            context.user_data["awaiting_message"] = False
            
            preview_text = "‚úâÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∫–∞–Ω–∞–ª:\n\n"
            if caption:
                preview_text += f"–ü–æ–¥–ø–∏—Å—å: {caption}\n"
            
            await update.message.reply_text(
                preview_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
                     InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="confirm_no")]
                ])
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ!")

    elif context.user_data.get("awaiting_admin_message"):
        message_text = update.message.text
        if not message_text.strip():
            await update.message.reply_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        try:
            user_tag = format_user_tag(user_id)
            await context.bot.send_message(
                chat_id=OPERATOR_USER_ID,
                text=f"üö® –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {user_tag}:\n\n{message_text}"
            )
            user_manager.set_last_admin_message_time(user_id, datetime.now())
            await update.message.reply_text("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", reply_markup=main_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è!", reply_markup=main_keyboard())
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop("awaiting_admin_message", None)

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_yes":
        user_id = query.from_user.id
        pending = user_manager.get_pending_message(user_id)
        
        if pending:
            if pending['type'] == 'text':
                user_tag = format_user_tag(user_id)
                try:
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                    text = f"–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_tag}\n\n{pending['content']}"
                    sent_message = await context.bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=text
                    )
                    # –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_link = f"https://t.me/{CHANNEL_USERNAME}/{sent_message.message_id}"
                    user_manager.increment_message_count(user_id)
                    user_manager.set_last_message_time(user_id, datetime.now())
                    await query.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {message_link}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
                finally:
                    user_manager.remove_pending_message(user_id)
                
            else:
                user_tag = format_user_tag(user_id)
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–µ–¥–∏–∞
                moderator_text = f"–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_tag}"
                if pending['caption']:
                    moderator_text += f"\n{pending['caption']}"
                
                try:
                    if pending['type'] == 'photo':
                        await context.bot.send_photo(
                            chat_id=OPERATOR_USER_ID,
                            photo=pending['content'],
                            caption=moderator_text,
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"moderate_approve_{user_id}"),
                                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"moderate_reject_{user_id}")
                            ]])
                        )
                    elif pending['type'] == 'video':
                        await context.bot.send_video(
                            chat_id=OPERATOR_USER_ID,
                            video=pending['content'],
                            caption=moderator_text,
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"moderate_approve_{user_id}"),
                                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"moderate_reject_{user_id}")
                            ]])
                        )
                    
                    user_manager.set_last_message_time(user_id, datetime.now())
                    await query.message.reply_text("‚úÖ –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞: {e}")
                    await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞!")
                    user_manager.remove_pending_message(user_id)
            
            await send_main_menu(update, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

        else:
            await query.message.reply_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    elif query.data == "confirm_no":
        user_manager.remove_pending_message(query.from_user.id)
        await query.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await send_main_menu(update, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

async def handle_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        data_parts = query.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        
        await query.message.edit_reply_markup(reply_markup=None)
        
        pending = user_manager.get_pending_message(user_id)
        if not pending:
            return

        user_info = user_manager.get_user_info(user_id)
        anonymous_tag = f"#–æ—Ç–±—Ä–æ—Å{user_info['number']}"

        if action == "approve":
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞
            if pending['type'] == 'text':
                text = f"–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {anonymous_tag}\n\n{pending['content']}"
                await context.bot.send_message(CHANNEL_ID, text=text)
            else:
                base_caption = f"–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {anonymous_tag}"
                caption = f"{base_caption}\n{pending['caption']}" if pending.get('caption') else base_caption
                
                if pending['type'] == 'photo':
                    await context.bot.send_photo(CHANNEL_ID, pending['content'], caption=caption)
                elif pending['type'] == 'video':
                    await context.bot.send_video(CHANNEL_ID, pending['content'], caption=caption)

            await context.bot.send_message(user_id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!")
            user_manager.increment_message_count(user_id)

        else:
            await context.bot.send_message(user_id, "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

        user_manager.remove_pending_message(user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ!")

async def handle_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_agreement(update):
        return
    
    user_id = update.effective_user.id
    user_info = user_manager.get_user_info(user_id)
    
    profile_text = (
        f"üë§ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n"
        f"üî¢ –í–∞—à –Ω–æ–º–µ—Ä: {user_info['number']}\n"
        f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_info['messages_sent']}\n"
    )
    
    last_message_time = user_manager.get_last_message_time(user_id)
    if last_message_time:
        next_message_time = last_message_time
        profile_text += f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {remaining.seconds // 60} –º–∏–Ω—É—Ç.\n"
    
    last_admin_message_time = user_manager.get_last_admin_message_time(user_id)
    if last_admin_message_time:
        next_admin_message_time = last_admin_message_time + ADMIN_MESSAGE_COOLDOWN
        if datetime.now() < next_admin_message_time:
            remaining = next_admin_message_time - datetime.now()
            hours = remaining.seconds // 3600
            minutes = (remaining.seconds % 3600) // 60
            profile_text += f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç.\n"
    
    await update.message.reply_text(profile_text, reply_markup=main_keyboard())

async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_agreement(update):
        return
    
    context.user_data.pop("awaiting_message", None)
    context.user_data.pop("awaiting_admin_message", None)
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())

async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=main_keyboard())

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    application = Application.builder().token(API_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_agreement, pattern="^agree:"))
    application.add_handler(CallbackQueryHandler(handle_confirmation, pattern="^confirm_"))
    application.add_handler(CallbackQueryHandler(handle_moderation, pattern="^moderate_"))
    
    application.add_handler(MessageHandler(filters.Text(["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"]), handle_message_btn))
    application.add_handler(MessageHandler(filters.Text(["–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"]), handle_admin_request_btn))
    application.add_handler(MessageHandler(filters.Text(["–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]), handle_profile))
    application.add_handler(MessageHandler(filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞"]), handle_cancel))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, handle_user_message))
    
    application.add_handler(MessageHandler(filters.ALL, handle_unknown))
    
    application.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()

if __name__ == "__main__":
    main()